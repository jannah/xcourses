/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */




$(document).ready(function() {
    init();

});
var clientId = '936619661213.apps.googleusercontent.com';
var apiKey = 'AIzaSyAFvlCJeXlGvndYLmZBs-nM9bT7n1bxsdY';
var scopes = 'https://www.googleapis.com/auth/calendar';
var apiAuth = {"web":
            {"auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "client_secret": "qTC10ZSoJzQhGLL6cM1yGmBQ",
                "token_uri": "https://accounts.google.com/o/oauth2/token",
                "client_email": "936619661213@developer.gserviceaccount.com",
                "redirect_uris": ["http://localhost/", "http://people.ischool.berkeley.edu/"],
                "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/936619661213@developer.gserviceaccount.com",
                "client_id": "936619661213.apps.googleusercontent.com",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "javascript_origins": ["http://localhost/", "http://people.ischool.berkeley.edu/"]}};

var calendars = {};
var selectedCal = {};
var currentLevel = 0;
var courses = {};
var selectedCalId;
function init() {

    loadCourseData();
    displayCourses();
}
/*
 function handleClientLoad() {
 gapi.client.setApiKey(apiKey);
 window.setTimeout(checkAuth, 1);
 checkAuth();
 }
 */
/*
 function checkAuth() {
 console.log('authorizing');
 gapi.auth.authorize({client_id: clientId, client_email: apiAuth.web.client_email, scope: scopes, immediate: true, response_type: 'token'},
 handleAuthResult);
 }
 */
function handleAuthResult(authResult) {
    var authorizeButton = document.getElementById('authorize-button');
    if (authResult) {
        authorizeButton.style.visibility = 'hidden';
//        makeApiCall();
        loadCalendarList();
    } else {
        authorizeButton.style.visibility = '';
        authorizeButton.onclick = handleAuthClick;
    }
}

function handleAuthClick(event) {
    gapi.auth.authorize(
            {client_id: clientId, scope: scopes, immediate: false},
    handleAuthResult);
    return false;
}

function makeApiCall() {
    gapi.client.load('calendar', 'v3', function() {
        var request = gapi.client.calendar.events.list({
            'calendarId': 'primary'
        });

        request.execute(function(resp) {
            for (var i = 0; i < resp.items.length; i++)
            {
                console.log(resp.items[i]);
                var li = "<li>" + resp.items[i].summary + "</li>";
                $('#events').append(li);
//                var li = document.createElement('li');
//                li.appendChild(document.createTextNode(resp.items[i].summary));
//                document.getElementById('events').appendChild(li);
            }
        });
    });
}


function loadCalendarList()
{
    gapi.client.load('calendar', 'v3', function()
    {
        var request = gapi.client.calendar.calendarList.list();
        request.execute(function(resp)
        {
            for (var i = 0, j = resp.items.length; i < j; i++)
            {

                var cal = resp.items[i];
                var item = "<li id='" + cal.id + "'>" + cal.summary
                        + "<input type='button' class='add-calendar-button' data-id='"
                        + cal.id + "' value='select'></input>"
//                        + ((cal.location) ? "<p>" + cal.location + "</p>" : "")
//                        + "<p>" + ((cal.description) ? cal.description : "") + "</p>"
                        + "</li>";

                if (cal.accessRole === 'owner')
                {
                    $('#calendar-list ul').append(item);
                    calendars[cal.id] = cal;
                }
//                console.log(resp);
            }

            var newCal = "<li><form id='new-cal-form'><input type='text'placeholder='Add new Calendar' + id='new-cal-text'/>"
                    + "<input id='submit-new-cal' type='submit' value='Add' text='Add'/></form></li>";
            $('#calendar-list ul').append(newCal);

            calEvents();
        }
        );
    });

}

function calEvents()
{
    $('.add-calendar-button').on('click', function() {
        var self = $(this);
        selectedCalId = self.attr('data-id');
        showCalendar(selectedCalId);
    });
    $('#new-cal-form').on('submit', function() {
        console.log('adding new calendar');
        var calName = $('#new-cal-text').val();
        console.log(calName);

        var request = gapi.client.calendar.calendars.insert({"resource":
                    {"summary": calName,
                        "description": "Generated by xCourses",
                        "timezone": "America/Los Angeles"}});
        request.execute(function(resp) {
            console.log(resp);
            calendars[resp['id']] = resp;
            showCalendar(resp['id']);
        });

        return false;
    });
}

function showCalendar(calId)
{
    var cal = calendars[calId];
    console.log(cal.timeZone);
    var frame = "<iframe id='cal-frame' src='https://www.google.com/calendar/embed?src=" + calId
            + "&ctz=" + cal.timeZone + "&mode=WEEK&wkst=2&dates=20130901/20130907&" + " frameborder='0' scrolling='no'></iframe>";
    $('#calendar').empty().append(frame);
    $('#calendar-list').hide();
}


function loadCourseData()
{
    var request = new XMLHttpRequest();
    request.open("GET", "courses/courses.xml", false);
    request.send();
    var xml = request.responseXML;

    request.close;
//    console.log(xml);
    var jsonText = xmlToJson(xml);
    console.log(jsonText);
    var temp = jsonText['Courses']['Course'];

    for (var i = 0, j = temp.length; i < j; i++)
    {
        courses[temp[i]['UID']] = temp[i];
//        console.log(course);
//        console.log(course.CourseTitle);
    }

    console.log(courses);
}


function displayCourse(course)
{
    var html = "<li class='course-listing' id='" + course.CourseCCN + "'>"
            + "<a href='#'>" + formatCourseTitle(course) + "</a><br>"
            + "<input type='button' value='Add' class='add-course-button'"
            + " data-id='" + course.UID + "' data-ccn='" + course.CourseCCN + "'></input></li>";
    $('#course-list ul').append(html);


}

function formatCourseTitle(course)
{
//    console.log(course);
    return course['CourseShortCode'] + ":" + course['CourseTitle'] + " (" + course['Units']
            + ((parseInt(course['Units']) > 1) ? " Units" : " Unit ") + ")";
}
function eventAddCourse()
{
    $('.add-course-button').on('click', function()
    {
        var self = $(this);
        var uid = self.attr('data-id');

        var course = courses[uid];
        var resource = createEvent(course, 0);
        var event = {};
        event['calendarId'] = selectedCalId;
        event['resource'] = resource;
        gapi.client.load('calendar', 'v3', function()
        {
            var request = gapi.client.calendar.events.insert(event);
            request.execute(function(resp)
            {
                console.log(resp);
                var src = $('#cal-frame').attr('src');
                $('#cal-frame').attr('src', src);
            });
        });

    });
}
function xmlToJson(xml) {

    // Create the return object
    var obj;
    currentLevel++;



    // do children
    if (xml.hasChildNodes()) {
        obj = {};
//        console.log(xml.childNodes);
        if (xml.childNodes.length === 1 && xml.childNodes.item(0).nodeName === '#text')
        {
//            console.log('single test');
            return xml.childNodes.item(0).nodeValue;
        }

        for (var i = 0; i < xml.childNodes.length; i++) {
            var item = xml.childNodes.item(i);
            var nodeName = item.nodeName;
            if (typeof (obj[nodeName]) === "undefined")
            {

                obj[nodeName] = xmlToJson(item);
            }
            else {
                if (typeof (obj[nodeName].push) === "undefined") {
                    var old = obj[nodeName];
//                    console.log(nodeName + "=" + item.nodeValue);
                    obj[nodeName] = [];
                    obj[nodeName].push(old);

                }
                obj[nodeName].push(xmlToJson(item));
            }
        }
    }
    else if (xml.nodeType === 1) { // element
        // do attributes
        if (xml.attributes.length > 0) {
            obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
                var attribute = xml.attributes.item(j);
                obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
        }
    } else if (xml.nodeType === 3) { // text
//        console.log(xml.nodeValue);
        var txt = xml.nodeValue;
        txt = txt.replace("\t", "");
        if (txt === "\n")
            txt = "";
        if (txt.length > 0)
            obj = txt;
    }
//    console.log(obj);
//    console.log(currentLevel--);
    return obj;
}




function createEvent(course, entryIndex)
{
    if (entryIndex)
        entryIndex = 0;
    var event = {};
    var schedule = course.Sections.Section.SectionSchedule.SectionScheduleEntry;
    if (typeof (schedule) === 'Array')
    {
        console.log('multiple schedules');
        schedule = schedule[entryIndex];
    }


    console.log(schedule);
    var startDate = new Date(Date.parse(course.CourseStartDate + " " + schedule.ScheduledTime.StartTime));
    var endDate = new Date(Date.parse(course.CourseStartDate + " " + schedule.ScheduledTime.EndTime));
    var lastDate = new Date(Date.parse(course.CourseEndDate + " " + schedule.ScheduledTime.EndTime));
    console.log(startDate);
    console.log(endDate);
    event['start'] = {};
    event['end'] = {};
    event['recurrence'] = [];

    var day = schedule.ScheduledTime.Day;
    if (typeof (day) === 'Array')
    {
        var temp = "";
        for (var i = 0, j = day.length; i < j; i++)
        {
            if (i > 0)
                temp += ',';
            temp += day[i];

        }
        day = temp;
    }

    var rrule = 'RRULE:FREQ=' + schedule.ScheduledTime.Frequency

            + ';UNTIL=' + RRDateString(lastDate)
            + ";BYDAY=" + day;
    rrule = rrule.toUpperCase();
    console.log(rrule);
//  + ';DTSTART;TZID=AMERICA_PACIFIC:'+RRDateString(starDate)
    event['recurrence'][0] = rrule;
    event['start']['dateTime'] = ISODateString(startDate);
    event['start']['timeZone'] = "America/Los_Angeles";
    event['end']['dateTime'] = ISODateString(endDate);
    event['end']['timeZone'] = "America/Los_Angeles";
    event['summary'] = course.CourseShortCode + "-" + course.CourseTitle;
    event['location'] = schedule.ScheduledLocation.Building + " " + schedule.ScheduledLocation.Room;
    event['htmlLink'] = "";
    event['description'] = course.CourseDescriptions.GeneralCatalog;
    console.log(event);
    return event;

}

function displayCourses()
{
    for (var key in courses)
    {
        var course = courses[key];
        displayCourse(course);
    }
    eventAddCourse();
}

function ISODateString(d)
{
    function pad(n)
    {
        return n < 10 ? '0' + n : n
    }
    return d.getUTCFullYear() + '-'
            + pad(d.getUTCMonth() + 1) + '-'
            + pad(d.getUTCDate()) + 'T'
            + pad(d.getUTCHours()) + ':'
            + pad(d.getUTCMinutes()) + ':'
            + pad(d.getUTCSeconds()) + 'Z'
}


function RRDateString(d)
{
    function pad(n)
    {
        return n < 10 ? '0' + n : n
    }
    return d.getUTCFullYear() + ""
            + pad(d.getUTCMonth() + 1) + ""
            + pad(d.getUTCDate()) + 'T'
            + pad(d.getUTCHours()) + ""
            + pad(d.getUTCMinutes()) + ""
            + pad(d.getUTCSeconds()) + 'Z'
}

